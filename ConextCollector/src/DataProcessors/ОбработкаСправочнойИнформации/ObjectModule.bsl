Перем Чтец;

#Область ПрограммныйИнтерфейс

Процедура ПрочитатьКнигу(ПутьДоКниги, ВерсияПлатформы) Экспорт
	
	Чтец = Обработки.ЧтениеСправки.Создать();
	ДеревоСправки = Чтец.ПрочитатьДеревоСправкиИзКниги(ПутьДоКниги);
	БазовыйКаталогСправки = БазовыйКаталогСправки(ПутьДоКниги);
	
	ОбработатьОглавление(ДеревоСправки, БазовыйКаталогСправки, ВерсияПлатформы);
	ОбработатьПодчиненныеСущности(ПутьДоКниги, ВерсияПлатформы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОчиститьБазу() Экспорт
	
	Выборка = Справочники.Свойства.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	Выборка = Справочники.ВерсииТипов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	Выборка = Справочники.Типы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	Выборка = Справочники.События.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;  
	
	Выборка = Справочники.Методы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	Выборка = Справочники.Перегрузки.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьПодчиненныеСущности(ПутьДоКниги, ВерсияПлатформы)
	
	Файл = Новый Файл(ПутьДоКниги);
	БазовыйКаталог = Файл.Путь + "/shcntx_ru";
	
	ОбработатьСобытия(БазовыйКаталог, ВерсияПлатформы);
	ОбработатьМетоды(БазовыйКаталог, ВерсияПлатформы);
	
КонецПроцедуры

Процедура ОбработатьСобытия(БазовыйКаталог, ВерсияПлатформы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	События.Ссылка КАК Ссылка,
	|	События.ПутьКОписанию КАК ПутьКОписанию
	|ИЗ
	|	Справочник.События КАК События
	|ГДЕ
	|	События.ВерсияПлатформы = &ВерсияПлатформы";
	Запрос.УстановитьПараметр("ВерсияПлатформы", ВерсияПлатформы);
	ВыборкаСобытий = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСобытий.Следующий() Цикл
		
		ПутьКФайлу = БазовыйКаталог + ВыборкаСобытий.ПутьКОписанию;
		Определение = Чтец.ПрочитатьОпределение(ПутьКФайлу);
		
		Если Определение = Неопределено Тогда
			ОбщийМодуль.СообщитьПользователю("Не удалось прочитать описание сущности: " + ВыборкаСобытий.Ссылка);
			Продолжить;
		КонецЕсли;
		
		УдалитьПерегрузки(ВыборкаСобытий.Ссылка);
		
		СобытиеОбъект = ВыборкаСобытий.Ссылка.ПолучитьОбъект();
		СобытиеОбъект.НаименованиеАнгл = ВтороеНаименованиеИзСтроки(Определение.Заголовок); 
		СобытиеОбъект.Описание = ОписаниеСтрокойИзМассива(Определение.Описание);
		СобытиеОбъект.Записать();
		
		Для Каждого Перегрузка Из Определение.Перегрузки Цикл		
			СсылкаНаПерегрузку = НоваяПерегрузкаПоСущности(ВыборкаСобытий, Перегрузка);			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьМетоды(БазовыйКаталог, ВерсияПлатформы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Методы.Ссылка КАК Ссылка,
	|	Методы.ПутьКОписанию КАК ПутьКОписанию
	|ИЗ
	|	Справочник.Методы КАК Методы
	|ГДЕ
	|	Методы.ВерсияПлатформы = &ВерсияПлатформы";
	Запрос.УстановитьПараметр("ВерсияПлатформы", ВерсияПлатформы);
	ВыборкаМетодов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаМетодов.Следующий() Цикл
		
		ПутьКФайлу = БазовыйКаталог + ВыборкаМетодов.ПутьКОписанию;
		Определение = Чтец.ПрочитатьОпределение(ПутьКФайлу);
		
		Если Определение = Неопределено Тогда
			ОбщийМодуль.СообщитьПользователю("Не удалось прочитать описание сущности: " + ВыборкаМетодов.Ссылка);
			Продолжить;
		КонецЕсли;
		
		УдалитьПерегрузки(ВыборкаМетодов.Ссылка);
		
		МетодОбъект = ВыборкаМетодов.Ссылка.ПолучитьОбъект(); 
		
		МетодОбъект.КонтекстыВыполнения.Очистить();
		МетодОбъект.ВозвращаемыеЗначения.Очистить();
		
		Для Каждого КонтекстВыполнения Из Определение.Доступность Цикл	
			НоваяЗапись = МетодОбъект.КонтекстыВыполнения.Добавить();
			НоваяЗапись.Контекст = КонтекстПоСтроке(КонтекстВыполнения);	
		КонецЦикла;
		
		Если Не Определение.Наименование = Неопределено Тогда
			МетодОбъект.НаименованиеАнгл = Определение.Наименование.Право;
		КонецЕсли;
		
		МетодОбъект.Описание = СтрСоединить(Определение.Описание, Символы.ПС);
		
		МетодОбъект.ВозвращаемыеЗначения.Очистить();
		Для Каждого СтрокаТипа Из Определение.ВозвращаемоеЗначение.Типы Цикл		
			НоваяСтрока = МетодОбъект.ВозвращаемыеЗначения.Добавить();
			НоваяСтрока.ТипСтрокой = СтрокаТипа.Имя;	
		КонецЦикла;
		
		МетодОбъект.Записать();
		
		Для Каждого Перегрузка Из Определение.Перегрузки Цикл		
			СсылкаНаПерегрузку = НоваяПерегрузкаПоСущности(ВыборкаМетодов, Перегрузка);			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяПерегрузкаПоСущности(ВыборкаСобытий, Перегрузка)
	Элемент = Справочники.Перегрузки.СоздатьЭлемент();
	Элемент.Владелец = ВыборкаСобытий.Ссылка;
	Элемент.Наименование = Перегрузка.Вариант;
	Элемент.Конструктор = Перегрузка.Конструктор;
	Элемент.Описание = СтрСоединить(Перегрузка.Описание, Символы.ПС);
	
	Для Каждого Параметр Из Перегрузка.Параметры Цикл
		
		НоваяСтрока = Элемент.Параметры.Добавить();
		НоваяСтрока.ИмяПараметра = ИмяПараметраИзПредставления(Параметр.Представление);
		НоваяСтрока.Описание = ОписаниеСтрокойИзМассива(Параметр.Описание);
		НоваяСтрока.Обязательный = Параметр.Обязательный; 
		
		// TODO: сделай проще
		Массив = Новый Массив;
		Для Каждого Тип Из Параметр.Типы Цикл
			Массив.Добавить(Тип.Имя);	
		КонецЦикла;
		НоваяСтрока.Типы = СтрСоединить(Массив, ";");
		
	КонецЦикла;
	
	Элемент.Записать();
	Возврат Элемент.Ссылка;
КонецФункции

Функция СоздатьОбновитьТип(ВходящиеДанные, Идентификатор, Содержание)
	
	Ссылка = Справочники.Типы.НайтиПоРеквизиту("ИдентификаторДляПоиска", Идентификатор);
	Если Ссылка.Пустая() Тогда
				
		Элемент = Справочники.Типы.СоздатьЭлемент();
		Элемент.Наименование = ПреобразованиеИдентификаторов.КаноническийИдентификатор(Содержание.Идентификатор.Лево);
		Элемент.НаименованиеАнгл = ПреобразованиеИдентификаторов.КаноническийИдентификатор(Содержание.Идентификатор.Право); 
		Элемент.ИдентификаторДляПоиска = Идентификатор;
		Элемент.Идентификатор = ПреобразованиеИдентификаторов.ИдентификаторВФорматеКонстанты(Элемент.НаименованиеАнгл); 
		Элемент.Перечисление = Содержание.ЕстьЗначения;
		
		Если Элемент.Перечисление Тогда
			Если ВходящиеДанные.Родитель.Имя = "Свойства объектов метаданных" Тогда
				Элемент.ИсключитьИзГлобальногоКонтекста = Истина;
		    КонецЕсли;
		КонецЕсли;
		
		Элемент.Записать();
		
		Ссылка = Элемент.Ссылка;
	КонецЕсли;	
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьОбновитьВерсиюТипа(ВходящиеДанные, Идентификатор, СсылкаНаТип, ВерсияПлатформы)
	СсылкаНаВерсию = ВерсияТипаПоФильтру(Идентификатор, СсылкаНаТип, ВерсияПлатформы);
	Если СсылкаНаВерсию.Пустая() Тогда
		
		Элемент = Справочники.ВерсииТипов.СоздатьЭлемент();
		Элемент.ИдентификаторДляПоиска = Идентификатор;
		Элемент.Идентификатор = СсылкаНаТип.Идентификатор;
		Элемент.Владелец = СсылкаНаТип;
		Элемент.ВерсияПлатформы = ВерсияПлатформы;
		Элемент.Наименование = СсылкаНаТип.Наименование;
		Элемент.НаименованиеАнгл = СсылкаНаТип.НаименованиеАнгл;
		Элемент.ПутьКОписанию = ВходящиеДанные.Путь;
		Элемент.Перечисление = СсылкаНаТип.Перечисление;
		Элемент.Записать();
		
		СсылкаНаВерсию = Элемент.Ссылка;
	КонецЕсли;
	Возврат СсылкаНаВерсию;
КонецФункции

Функция СоздатьОбновитьЗначениеТипа(ВходящиеДанные, Идентификатор, ОпределениеЗначения, ВерсияТипа)
	Если ОпределениеЗначения = Неопределено Тогда
		Сообщить(СтрШаблон("Значение %1 у типа %2 не загружено", Идентификатор, ВерсияТипа));
		Возврат Неопределено;
	КонецЕсли;
		
	СсылкаНаЗначение = ЗначениеТипаПоФильтру(Идентификатор, ВерсияТипа, ВерсияТипа.ВерсияПлатформы);
	Если СсылкаНаЗначение.Пустая() Тогда
		Элемент = Справочники.Значения.СоздатьЭлемент();
		Элемент.Идентификатор = Идентификатор;
		Элемент.Наименование = ОпределениеЗначения.Наименование.Лево;
		Элемент.НаименованиеАнгл = ОпределениеЗначения.Наименование.Право; 
		Элемент.Владелец = ВерсияТипа;
		Элемент.ВерсияПлатформы = ВерсияТипа.ВерсияПлатформы;
		Элемент.ПутьКОписанию = ВходящиеДанные.Путь;
		Элемент.Записать();
		
		СсылкаНаЗначение = Элемент.Ссылка;
	КонецЕсли;
	Возврат СсылкаНаЗначение;
	
КонецФункции

Функция СоздатьОбновитьСвойствоТипа(ВходящиеДанные, Идентификатор, Определение, ВерсияТипа)
	
	Если Определение = Неопределено Или Определение.Наименование = Неопределено Тогда
		ОбщийМодуль.СообщитьПользователю("Не удалось загрузить: " + Идентификатор + " для типа " + ВерсияТипа);
		Возврат Справочники.Свойства.ПустаяСсылка();	
	КонецЕсли;
	
	СсылкаНаСвойство = СвойствоТипаПоФильтру(Идентификатор, ВерсияТипа, ВерсияТипа.ВерсияПлатформы);
	Если СсылкаНаСвойство.Пустая() Тогда
		Элемент = Справочники.Свойства.СоздатьЭлемент();
		Элемент.Идентификатор = Идентификатор;
		Элемент.Наименование = Определение.Наименование.Лево;
		Элемент.НаименованиеАнгл = Определение.Наименование.Право;
		Элемент.Владелец = ВерсияТипа;
		Элемент.ВерсияПлатформы = ВерсияТипа.ВерсияПлатформы;
		Элемент.ПутьКОписанию = ВходящиеДанные.Путь;
		Элемент.РежимИспользования = РежимИспользованияСвойстваПоСтроке(Определение.Использование);
		Элемент.Записать();
		
		СсылкаНаСвойство = Элемент.Ссылка;
	КонецЕсли;	
	
	Возврат СсылкаНаСвойство;
	
КонецФункции

Функция СоздатьОбновитьМетодВерсииТипа(ВходящиеДанные, Идентификатор, ВерсияТипа)
	
	СсылкаНаМетод = МетодТипаПоФильтру(Идентификатор, ВерсияТипа, ВерсияТипа.ВерсияПлатформы);
	
	Если СсылкаНаМетод.Пустая() Тогда
		Элемент = Справочники.Методы.СоздатьЭлемент();
		Элемент.Наименование = ВходящиеДанные.Имя;
		Элемент.Идентификатор = Идентификатор;
		Элемент.Владелец = ВерсияТипа; 
		Элемент.ВерсияПлатформы = ВерсияТипа.ВерсияПлатформы;
		Элемент.ПутьКОписанию = ВходящиеДанные.Путь;
		Элемент.Записать();
		
		СсылкаНаМетод = Элемент.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаНаМетод;
	
КонецФункции

Функция СоздатьОбновитьСобытиеВерсииТипа(ВходящиеДанные, Идентификатор, ВерсияТипа)
	
	СсылкаНаСобытие = СобытиеТипаПоФильтру(Идентификатор, ВерсияТипа, ВерсияТипа.ВерсияПлатформы);
	Если СсылкаНаСобытие.Пустая() Тогда
		Элемент = Справочники.События.СоздатьЭлемент();
		Элемент.Наименование = ВходящиеДанные.Имя;
		Элемент.Идентификатор = Идентификатор;
		Элемент.Владелец = ВерсияТипа;
		Элемент.ВерсияПлатформы = ВерсияТипа.ВерсияПлатформы;
		Элемент.ПутьКОписанию = ВходящиеДанные.Путь;
		Элемент.Записать();
		
		СсылкаНаСобытие = Элемент.Ссылка;
	КонецЕсли;
	Возврат СсылкаНаСобытие;
	
КонецФункции

Процедура ОбработатьОглавление(Содержание, БазовыйКаталогСправки, ВерсияПлатформы)
	
	Для Каждого СтрокаСодержания Из Содержание.Строки Цикл
				
		Если ЭтоКаталогОглавления(СтрокаСодержания.Путь) Тогда
			
			ОбработатьОглавление(СтрокаСодержания, БазовыйКаталогСправки, ВерсияПлатформы);
			
		Иначе
			
			Если Не ПустаяСтрока(СтрокаСодержания.Путь) Тогда
				Содержание = Чтец.ПрочитатьОпределение(БазовыйКаталогСправки + СтрокаСодержания.Путь);
				
				Если Содержание.Идентификатор = Неопределено Тогда
					
					ОбщийМодуль.СообщитьПользователю("Не удалось прочитать: " + СтрокаСодержания.Путь);
					Продолжить;
										
				КонецЕсли;

				
				Идентификатор = ИдентификаторСущностиИзПути(СтрокаСодержания.Путь);
				СсылкаНаТип = СоздатьОбновитьТип(СтрокаСодержания, Идентификатор, Содержание);		
				СсылкаНаВерсию = СоздатьОбновитьВерсиюТипа(СтрокаСодержания, Идентификатор, СсылкаНаТип, ВерсияПлатформы);		
				ОбработатьСодержаниеТипа(СсылкаНаТип, СсылкаНаВерсию, СтрокаСодержания, БазовыйКаталогСправки);
			КонецЕсли;	
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСодержаниеТипа(Тип, ВерсияТипа, СтрокаСодержания, БазовыйКаталогСправки)
	
	Для Каждого ПодчиненныйОбъект Из СтрокаСодержания.Строки Цикл
		
		Если ЭтоКаталогОглавления(ПодчиненныйОбъект.Путь) Тогда
			
			ОбработатьСодержаниеТипа(Тип, ВерсияТипа, ПодчиненныйОбъект, БазовыйКаталогСправки);
			
		ИначеЕсли ЭтоРазделСправки(ПодчиненныйОбъект, "Свойства", "properties") Тогда
			
			ЭтоПеречисление = ВерсияТипа.Перечисление; 
			Коллекция = СтрокиОбходаРазделаСправки(ПодчиненныйОбъект);
			
			Для Каждого СтрокаСвойства Из Коллекция Цикл
								
				Имя = нРег(СтрокаСвойства.Имя);
				Определение = Чтец.ПрочитатьОпределение(БазовыйКаталогСправки + СтрокаСвойства.Путь);
				Если ЭтоПеречисление Тогда
					СсылкаНаЗначение = СоздатьОбновитьЗначениеТипа(СтрокаСвойства, Имя, Определение, ВерсияТипа);	
				Иначе
					СсылкаНаСвойство = СоздатьОбновитьСвойствоТипа(СтрокаСвойства, Имя, Определение, ВерсияТипа);		
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЭтоРазделСправки(ПодчиненныйОбъект, "Методы", "methods") Тогда
			
			Коллекция = СтрокиОбходаРазделаСправки(ПодчиненныйОбъект);
			Для Каждого СтрокаМетода Из Коллекция Цикл
				
				Идентификатор = нРег(СтрокаМетода.Имя);			
				СсылкаНаМетод = СоздатьОбновитьМетодВерсииТипа(СтрокаМетода, Идентификатор, ВерсияТипа);
				
			КонецЦикла;
			
		ИначеЕсли ЭтоРазделСправки(ПодчиненныйОбъект, "События", "events") Тогда
			
			Коллекция = СтрокиОбходаРазделаСправки(ПодчиненныйОбъект);
			Для Каждого СтрокаСобытия Из Коллекция Цикл
				
				Идентификатор = ИдентификаторСущностиИзПути(СтрокаСобытия.Путь);		
				СсылкаНаСобытие = СоздатьОбновитьСобытиеВерсииТипа(СтрокаСобытия, Идентификатор, ВерсияТипа);
				
			КонецЦикла; 
			
		Иначе
			
			// Конструкторы
			// Параметры формы
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КорректноеИмяСущности(Знач Значение)
	Возврат СтрНайти(Значение, "<") = 0;	
КонецФункции

Функция СтрокиОбходаРазделаСправки(ПодчиненныйОбъект)
	Коллекция = ПодчиненныйОбъект.Строки;
	Если Не ПодчиненныйОбъект.Имя = "Свойства"
		И Не ПодчиненныйОбъект.Имя = "События"
		И Не ПодчиненныйОбъект.Имя = "Методы"  Тогда
		
		Коллекция = Новый Массив;
		Коллекция.Добавить(ПодчиненныйОбъект);
		
	КонецЕсли;
	Возврат Коллекция;		
КонецФункции

Функция ЭтоРазделСправки(ПроизвольнаяСтрока, ИмяРаздела, ИмяЧастиПути)
	Возврат ПроизвольнаяСтрока.Имя = ИмяРаздела Или ЕстьЧастьПути(ПроизвольнаяСтрока.Путь, ИмяЧастиПути);
КонецФункции

Функция ИдентификаторСущностиИзПути(Знач Путь)
	
	ЧастиПути = СтрРазделить(Путь, "/");
	ИмяФайла = ЧастиПути[ЧастиПути.ВГраница()];
	Идентификатор = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 5);
	Идентификатор = нРег(Идентификатор);
	Идентификатор = СтрЗаменить(Идентификатор, " ", "");
	Возврат Идентификатор;
	
КонецФункции

Функция ЕстьЧастьПути(Знач Путь, Знач ЧастьПути)
	
	// FIXME: Разделитель?
	Массив = СтрРазделить(Путь, "/");
	Возврат Массив.Найти(ЧастьПути) <> Неопределено;
	
КонецФункции

Функция ЭтоКаталогОглавления(Знач Путь)
	
	// FIXME: разделитель
	ЧастиПути = СтрРазделить(Путь, "/");
	ИмяФайла = ЧастиПути[ЧастиПути.ВГраница()];
	Возврат СтрНайти(ИмяФайла, "catalog") > 0;	
	
КонецФункции

Функция СобытиеТипаПоФильтру(Идентификатор, Владелец, Платформа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	События.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.События КАК События
	|ГДЕ
	|	События.Идентификатор = &Идентификатор
	|	И События.Владелец = &Владелец
	|	И События.ВерсияПлатформы = &Платформа";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Платформа", Платформа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВерсииТипов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция МетодТипаПоФильтру(Идентификатор, Владелец, Платформа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Методы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Методы КАК Методы
	|ГДЕ
	|	Методы.Идентификатор = &Идентификатор
	|	И Методы.Владелец = &Владелец
	|	И Методы.ВерсияПлатформы = &Платформа";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Платформа", Платформа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВерсииТипов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция СвойствоТипаПоФильтру(Идентификатор, Владелец, Платформа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Свойства КАК Свойства
	|ГДЕ
	|	Свойства.Идентификатор = &Идентификатор
	|	И Свойства.Владелец = &Владелец
	|	И Свойства.ВерсияПлатформы = &Платформа";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Платформа", Платформа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВерсииТипов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ЗначениеТипаПоФильтру(Идентификатор, Владелец, Платформа)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Значения КАК Значения
	               |ГДЕ
	               |	Значения.Идентификатор = &Идентификатор
	               |	И Значения.Владелец = &Владелец
	               |	И Значения.ВерсияПлатформы = &Платформа";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Платформа", Платформа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВерсииТипов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;		
КонецФункции

Функция ВерсияТипаПоФильтру(Идентификатор, Владелец, Платформа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииТипов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВерсииТипов КАК ВерсииТипов
	               |ГДЕ
	               |	ВерсииТипов.ИдентификаторДляПоиска = &ИдентификаторДляПоиска
	               |	И ВерсииТипов.Владелец = &Владелец
	               |	И ВерсииТипов.ВерсияПлатформы = &Платформа";
	Запрос.УстановитьПараметр("ИдентификаторДляПоиска", Идентификатор);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Платформа", Платформа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВерсииТипов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура УдалитьПерегрузки(СсылкаНаМетод)
	
	Выборка = Справочники.Перегрузки.Выбрать(, СсылкаНаМетод);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьОбъект().Удалить();	
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеСтрокойИзМассива(Массив)
	Значение = СтрСоединить(Массив, Символы.ПС);
	Значение = СокрЛП(Значение);
	Возврат Значение;
КонецФункции

Функция ВтороеНаименованиеИзСтроки(Строка)
	Результат = "";
	ПозицияСкобки = СтрНайти(Строка, "(");
	Если ПозицияСкобки <> 0 Тогда
		Результат = Сред(Строка, ПозицияСкобки + 1, СтрДлина(Строка) - ПозицияСкобки - 1);	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ИмяПараметраИзПредставления(Знач Представление)
	
	Позиция = СтрНайти(Представление, ">");
	Результат = Сред(Представление, 2, Позиция - 2);
	
	Возврат Результат;
	
КонецФункции

Функция КонтекстПоСтроке(Знач СтроковоеЗначение)
	Если СтроковоеЗначение = "сервер" Тогда
		Возврат Перечисления.КонтекстыВыполнения.Сервер;
	ИначеЕсли СтроковоеЗначение = "тонкий клиент" Тогда
		Возврат Перечисления.КонтекстыВыполнения.ТонкийКлиент;
	ИначеЕсли СтроковоеЗначение = "толстый клиент" Тогда
		Возврат Перечисления.КонтекстыВыполнения.ТолстыйКлиент;
	ИначеЕсли СтроковоеЗначение = "внешнее соединение" Тогда
		Возврат Перечисления.КонтекстыВыполнения.ВнешнееСоединение;
	ИначеЕсли СтроковоеЗначение = "мобильное приложение (клиент)" Тогда
		Возврат Перечисления.КонтекстыВыполнения.МобильноеПриложениеКлиент;	
	ИначеЕсли СтроковоеЗначение = "мобильное приложение (сервер)" Или СтроковоеЗначение = "мобильное приложение(сервер)" Тогда
		Возврат Перечисления.КонтекстыВыполнения.МобильноеПриложениеСервер;
	ИначеЕсли СтроковоеЗначение = "мобильный автономный сервер" Тогда
		Возврат Перечисления.КонтекстыВыполнения.МобильныйАвтономныйСервер;
	ИначеЕсли СтроковоеЗначение = "мобильное приложение(клиент)" Тогда
		Возврат Перечисления.КонтекстыВыполнения.МобильноеПриложениеКлиент;
	ИначеЕсли СтроковоеЗначение = "веб-клиент" Тогда
		Возврат Перечисления.КонтекстыВыполнения.ВебКлиент;
	ИначеЕсли СтроковоеЗначение = "интеграция" Тогда
		Возврат Перечисления.КонтекстыВыполнения.Интеграция;
	ИначеЕсли СтроковоеЗначение = "мобильный клиент" Тогда
		Возврат Перечисления.КонтекстыВыполнения.МобильныйКлиент;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция БазовыйКаталогСправки(Путь)
	
	Файл = Новый Файл(Путь);
	Возврат Файл.Путь + "/shcntx_ru";
	
КонецФункции

Функция РежимИспользованияСвойстваПоСтроке(Знач ВходящееЗначение)
	
	Если ВходящееЗначение = Неопределено Тогда
		Возврат Перечисления.РежимИспользованияСвойства.ЧтениеИЗапись;
	КонецЕсли;
	
	Если СтрСравнить(ВходящееЗначение, "Только запись") = 0 Тогда
		Возврат Перечисления.РежимИспользованияСвойства.ТолькоЗапись;
	ИначеЕсли СтрСравнить(ВходящееЗначение, "Только чтение") = 0 Тогда
		Возврат Перечисления.РежимИспользованияСвойства.ТолькоЧтение;
	Иначе
		Если СтрСравнить(ВходящееЗначение, "Чтение и запись") <> 0 Тогда
			Сообщить("Неизвестное знаение использования: " + ВходящееЗначение);	
		КонецЕсли;
		Возврат Перечисления.РежимИспользованияСвойства.ЧтениеИЗапись; 
	КонецЕсли;
	
КонецФункции

#КонецОбласти