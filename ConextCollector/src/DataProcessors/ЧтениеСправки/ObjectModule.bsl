////////////////////////////////////////////////////////////////////////////////////
// За основу проекта взяты разработки Валерия Агеева (@awa) (проект MetaRead) 
// и Виктории Дорохиной (@bambr1975).
////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных
Перем Кавычка;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПрочитатьДеревоСправкиИзКниги(ПутьДоКниги) Экспорт
	
	Компонента = НовыйОбъектКомпоненты();
	
	ФайлКниги = Новый Файл(ПутьДоКниги);
	Если Не ФайлКниги.Существует() Тогда
		ОбщийМодуль.СообщитьПользователю("Файл книги со справкой не существует");	
		Возврат Неопределено;
	КонецЕсли;
	
	Содержание = НовоеСодержание();
	
	Если Не Компонента.Открыть(ПутьДоКниги, Истина) Тогда
		ОбщийМодуль.СообщитьПользователю("Не удалось открыть файл """ + ПутьДоКниги + """ (файл не является контейнером 1Cv8 или файл открыт другой программой)");
		Возврат Неопределено;
	КонецЕсли;
	
	// Читаем PackBlock
	Если Не Компонента.СуществуетФайл("PackBlock") Тогда
		ОбщийМодуль.СообщитьПользователю("В контейнере """ + ПутьДоКниги + """ не найден файл ""PackBlock""");
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	
	Компонента.ПрочитатьВоВнешнийФайл("PackBlock", ВременныйФайл);
	
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Размер() = 0 Тогда
		ОбщийМодуль.УдалитьВременныйФайл(ВременныйФайл);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеЗИП = Новый ЧтениеZipФайла(ВременныйФайл);
	Если ЧтениеЗИП.Элементы.Количество() = 0 Тогда
		ОбщийМодуль.СообщитьПользователю("В архиве PackBlock не найдено ни одного файла");
		ЧтениеЗИП = Неопределено;
		ОбщийМодуль.УдалитьВременныйФайл(ВременныйФайл);
		Возврат Неопределено;
	КонецЕсли;
	Если ЧтениеЗИП.Элементы.Количество() > 1 Тогда
		ОбщийМодуль.СообщитьПользователю("В архиве PackBlock больше одного файла");
		ЧтениеЗИП = Неопределено;
		ОбщийМодуль.УдалитьВременныйФайл(ВременныйФайл);
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементЗИП = ЧтениеЗИП.Элементы[0];
	ЧтениеЗИП.Извлечь(ЭлементЗИП, ВременныйКаталог);
	ЭлементЗИП = Неопределено;
	
	ПутьКАрхивуКниги = ВременныйКаталог + "\" + "0";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ПутьКАрхивуКниги);
	ДеревоСправки = НовоеДеревоИзСправки(ТекстовыйДокумент);
	ТекстовыйДокумент = Неопределено;
	
	ОбработатьДеревоСправки(ДеревоСправки, Содержание);
	
	Возврат Содержание;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйОбъектКомпоненты()
	ВременныйФайл = Новый Файл(ПолучитьИмяВременногоФайла());
	ИмяФайлаКомпоненты = ВременныйФайл.Путь + "Cv8cf2.dll";
	МакетКомпоненты = ПолучитьОбщийМакет("v8cf2");
	МакетКомпоненты.Записать(ИмяФайлаКомпоненты);
	Успех  = ПодключитьВнешнююКомпоненту(ИмяФайлаКомпоненты, "ЧтениеСправки", ТипВнешнейКомпоненты.COM);
	Если Не Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	Компонента = Новый("AddIn.ЧтениеСправки.Cv8cf2");
	Возврат Компонента; 
КонецФункции

Функция НовоеСодержание()
	Содержание = Новый ДеревоЗначений();
	Содержание.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Содержание.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка"));
	Содержание.Колонки.Добавить("ПутьДляПоиска", Новый ОписаниеТипов("Строка"));
	Содержание.Колонки.Добавить("Статус", Новый ОписаниеТипов("Число"));
	Возврат Содержание;
КонецФункции

Процедура ОбработатьДеревоСправки(Дерево, Содержание)
	
	СтрокиДерева = Дерево.Строки[0].Строки;
	КоличествоЭлементов = +СтрокиДерева[0].Значение;
	
	СоответсвиеНомеровСтрок = Новый Соответствие;
	Для Ин = 1 По КоличествоЭлементов Цикл
		СоответсвиеНомеровСтрок.Вставить(+СтрокиДерева[Ин].Строки[0].Значение, Ин);
	КонецЦикла;
	
	Для Ин = 1 По КоличествоЭлементов Цикл
		СтрокаДерева = СтрокиДерева[Ин].Строки;
		Родитель = +СтрокаДерева[1].Значение;
		Если Родитель = 0 Тогда
			Стоп = 1;
			РекурсивноеДобавлениеСтрокВСодержание(СтрокиДерева, +СтрокаДерева[0].Значение, Содержание, Содержание, КоличествоЭлементов, СоответсвиеНомеровСтрок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивноеДобавлениеСтрокВСодержание(СтрокиДерева, Номер, СтрокаРодителя, Содержание, КоличествоЭлементов, СоответсвиеНомеровСтрок)	
	Номер = СоответсвиеНомеровСтрок[Номер];
	СтрокаДерева = СтрокиДерева[Номер].Строки;
	КолвоПодчиненных = +СтрокаДерева[2].Значение;
	
	НоваяСтрока = СтрокаРодителя.Строки.Добавить();
	НоваяСтрока.Имя = ПрочитатьСтрокуНаТекущемЯзыке(СтрокаДерева[КолвоПодчиненных + 3].Строки[2]);
	НоваяСтрока.Путь = СтрокаДерева[КолвоПодчиненных + 3].Строки[3].Значение;
	НоваяСтрока.ПутьДляПоиска = НРег(НоваяСтрока.Путь);
	Если Лев(НоваяСтрока.ПутьДляПоиска, 1) = "/" Тогда
		НоваяСтрока.ПутьДляПоиска = Сред(НоваяСтрока.ПутьДляПоиска, 2);
	КонецЕсли;
	НоваяСтрока.Статус = ?(КолвоПодчиненных = 0, 1, 0);
	Для Ин = 1 По КолвоПодчиненных Цикл
		РекурсивноеДобавлениеСтрокВСодержание(СтрокиДерева, +СтрокаДерева[Ин + 2].Значение, НоваяСтрока, Содержание, КоличествоЭлементов, СоответсвиеНомеровСтрок);
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьСтрокуНаТекущемЯзыке(СтрокаДерева)
	СтрокаНаНейтральномЯзыке = "";
	Для Ин = 2 По СтрокаДерева.Строки.Количество() - 1 Цикл
		ТекСтрока = СтрокаДерева.Строки[Ин];
		ТекущийЯзык = ТекСтрока.Строки[0].Значение;
		Если ТекущийЯзык = "ru" Тогда
			Возврат ТекСтрока.Строки[1].Значение;
		ИначеЕсли ТекущийЯзык = "#" Тогда
			СтрокаНаНейтральномЯзыке = ТекСтрока.Строки[1].Значение;
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(СтрокаНаНейтральномЯзыке) Тогда
		Возврат СтрокаНаНейтральномЯзыке;
	КонецЕсли;
	Возврат СтрокаДерева.Строки[2].Строки[1].Значение;
КонецФункции

Функция НовоеДеревоИзСправки(ТекстовыйДокумент)
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Значение");
	ТекущаяСтрока = Дерево.Строки.Добавить();
	
	// Режимы парсера
	Режим_ОжиданиеЗначения = 0;
	Режим_ВводСтроки = 1;
	Режим_ВводЗначения = 2;
	Режим_ОжиданиеРазделителя = 3;
	
	Режим = Режим_ОжиданиеЗначения;
	ВременноеЗначение = "";
	
	Для НомерСтрокиВходнойСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяВходнаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтрокиВходнойСтроки) + Символы.ПС;
		Пока Не ПустаяСтрока(ТекущаяВходнаяСтрока) Цикл
			Если Режим = Режим_ОжиданиеЗначения Тогда
				ТекущаяВходнаяСтрока = СокрЛП(ТекущаяВходнаяСтрока);	
				ОчереднойСимвол = Лев(ТекущаяВходнаяСтрока, 1);
				ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, 2);
				Если ОчереднойСимвол = "{" Тогда
					ТекущаяСтрока = ТекущаяСтрока.Строки.Добавить()
				ИначеЕсли ОчереднойСимвол = Кавычка Тогда
					ВременноеЗначение = "";	
					Режим = Режим_ВводСтроки;
				ИначеЕсли ОчереднойСимвол = "," Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
				ИначеЕсли ОчереднойСимвол = "}" Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель;
					Режим = Режим_ОжиданиеРазделителя;
				Иначе
					ВременноеЗначение = ОчереднойСимвол;
					Режим = Режим_ВводЗначения;
				КонецЕсли;
			ИначеЕсли Режим = Режим_ВводСтроки Тогда
				Позиция = СтрНайти(ТекущаяВходнаяСтрока, Кавычка);	
				Если Позиция = 0 Тогда
					ВременноеЗначение = ВременноеЗначение + ТекущаяВходнаяСтрока;
					ТекущаяВходнаяСтрока = "";
				Иначе
					ВременноеЗначение = ВременноеЗначение + Лев(ТекущаяВходнаяСтрока, Позиция - 1);	
					ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, Позиция + 1);
					Если Лев(ТекущаяВходнаяСтрока, 1) = Кавычка Тогда
						ВременноеЗначение = ВременноеЗначение + Кавычка;	
						ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, 2);
					Иначе
						ТекущаяСтрока.Значение = ВременноеЗначение;	
						Режим = Режим_ОжиданиеРазделителя;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Режим = Режим_ВводЗначения Тогда
				Позиция1 = СтрНайти(ТекущаяВходнаяСтрока, ",");
				Позиция2 = СтрНайти(ТекущаяВходнаяСтрока, "}");	
				Если Позиция1 = 0 Тогда
					Если Позиция2 = 0 Тогда
						ВременноеЗначение = ВременноеЗначение + ТекущаяВходнаяСтрока;
						ТекущаяВходнаяСтрока = "";
					Иначе
						ВременноеЗначение = ВременноеЗначение + Лев(ТекущаяВходнаяСтрока, Позиция2 - 1);
						ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, Позиция2 + 1);
						ТекущаяСтрока.Значение = ВременноеЗначение;
						ТекущаяСтрока = ТекущаяСтрока.Родитель;
						Режим = Режим_ОжиданиеРазделителя;
					КонецЕсли;	
				Иначе
					Если Позиция2 = 0 Тогда
						ВременноеЗначение = ВременноеЗначение + Лев(ТекущаяВходнаяСтрока, Позиция1 - 1);
						ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, Позиция1 + 1);
						ТекущаяСтрока.Значение = ВременноеЗначение;
						ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
						Режим = Режим_ОжиданиеЗначения;
					Иначе
						Если Позиция1 < Позиция2 Тогда
							ВременноеЗначение = ВременноеЗначение + Лев(ТекущаяВходнаяСтрока, Позиция1 - 1);
							ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, Позиция1 + 1);
							ТекущаяСтрока.Значение = ВременноеЗначение;
							ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
							Режим = Режим_ОжиданиеЗначения;
						Иначе
							ВременноеЗначение = ВременноеЗначение + Лев(ТекущаяВходнаяСтрока, Позиция2 - 1);
							ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, Позиция2 + 1);
							ТекущаяСтрока.Значение = ВременноеЗначение;
							ТекущаяСтрока = ТекущаяСтрока.Родитель;
							Режим = Режим_ОжиданиеРазделителя;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			ИначеЕсли Режим = Режим_ОжиданиеРазделителя Тогда
				ТекущаяВходнаяСтрока = СокрЛ(ТекущаяВходнаяСтрока);
				ОчереднойСимвол = Лев(ТекущаяВходнаяСтрока, 1);
				ТекущаяВходнаяСтрока = Сред(ТекущаяВходнаяСтрока, 2);
				Если ОчереднойСимвол = "," Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель.Строки.Добавить();
					Режим = Режим_ОжиданиеЗначения;
				ИначеЕсли ОчереднойСимвол = "}" Тогда
					ТекущаяСтрока = ТекущаяСтрока.Родитель;
				Иначе
					ТекстОшибки = СтрШаблон("Недопустимый символ %1 (Код символа %2) в режиме ожидания разделителя", 
						ОчереднойСимвол, КодСимвола(ОчереднойСимвол));
					ОбщийМодуль.СообщитьПользователю(ТекстОшибки);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции

#КонецОбласти

#Область Инициализация

Кавычка = """";

#КонецОбласти
