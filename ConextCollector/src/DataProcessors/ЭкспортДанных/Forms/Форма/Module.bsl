#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// FIXME: перейти на опцию обработки или вынести в расширение
	ТестовыеДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭкспортироватьДанные(Команда)
	
	// FIXME: исправить поддержку передачи файлов сервер -> клиент

	Если ПустаяСтрока(Объект.КаталогЭкспорта) Тогда
		ОбщийМодуль.СообщитьПользователю("КаталогЭкспорта не заполнен");
		Возврат;	
	КонецЕсли;
	
	Если Объект.ВыгрузитьИдентификаторыТипов Тогда
		ВыгрузитьИдентификаторыТипов(Объект.КаталогЭкспорта);	
	КонецЕсли;
	
	Если Объект.ВыгрузитьГлобальныеМетодыПоВерсиямПлатформы Тогда
		ВыгрузитьГлобальныеМетодыПоВерсиямПлатформы(Объект.КаталогЭкспорта);	
	КонецЕсли;
	
	Если Объект.ВыгрузитьДанные Тогда
		ВыгрузитьДанные(Объект.КаталогЭкспорта);	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыгрузитьИдентификаторыТипов(Каталог)
	ИмяФайла = "type-identifiers.json";
	Данные = ДанныеИдентификаторовТипов();
	
	ДанныеФайла = ШаблонЗаписиИдентификаторовТипов();
	
	Для Каждого ИнформацияОТипе Из Данные Цикл
		
		Идентификатор = ИнформацияОТипе.Идентификатор;
		Если ПустаяСтрока(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = ШаблонЗаписиИдентификатораТипа();
		Запись.Id = Идентификатор;
		Запись.Name = ИнформацияОТипе.НаименованиеАнгл;
		Запись.NameRu = ИнформацияОТипе.Наименование;
		
		ДанныеФайла.Identifiers.Добавить(Запись);
		
	КонецЦикла;
	
	ПутьКФайлу = Каталог + ИмяФайла;
	ЗаписатьДанныеВФайл(ДанныеФайла, ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьГлобальныеМетодыПоВерсиямПлатформы(Знач Каталог) 
	
	ИмяФайла = "global-methods.json";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Методы.Наименование КАК Наименование,
	|	Методы.НаименованиеАнгл КАК НаименованиеАнгл,
	|	Методы.ВерсияПлатформы КАК ВерсияПлатформы
	|ПОМЕСТИТЬ Методы
	|ИЗ
	|	Справочник.Методы КАК Методы
	|ГДЕ
	|	Методы.Владелец.Владелец = Значение(Справочник.Типы.ГлобальныйКонтекст)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Методы.Наименование КАК Наименование,
	|	Методы.ВерсияПлатформы КАК ВерсияПлатформы
	|ИЗ
	|	Методы КАК Методы
	|СГРУППИРОВАТЬ ПО
	|	Методы.Наименование,
	|	Методы.ВерсияПлатформы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Методы.ВерсияПлатформы.Порядок
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсияПлатформы)
	|ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Методы.Наименование КАК Наименование,
	|	Методы.НаименованиеАнгл КАК НаименованиеАнгл
	|ИЗ
	|	Методы КАК Методы
	|СГРУППИРОВАТЬ ПО
	|	Методы.Наименование,
	|	Методы.НаименованиеАнгл
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаМетодов = Пакет[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИменМетодов = Пакет[2].Выгрузить(); 
	
	ДанныеФайла = ШаблонЗаписиГлобальныхМетодов();
	
	Пока ВыборкаМетодов.Следующий() Цикл
		
		ИменаМетода = ВыборкаИменМетодов.Найти(ВыборкаМетодов.Наименование, "Наименование");
		
		Запись = ШаблонОписанияГлобальногоМетода();
		Запись.name = ИменаМетода.НаименованиеАнгл;
		Запись.nameRu = ИменаМетода.Наименование;
		ВыборкаВерсийПлатформы = ВыборкаМетодов.Выбрать();
		Запись.platformVersions = Новый Массив;
		Пока ВыборкаВерсийПлатформы.Следующий() Цикл
			ВерсияПлатформыСтрокой = ВерсияПлатформыСтрокой(ВыборкаВерсийПлатформы.ВерсияПлатформы, "VERSION_");
			Запись.platformVersions.Добавить(ВерсияПлатформыСтрокой);	
		КонецЦикла;
		
		ДанныеФайла.globalMethods.Добавить(Запись);
		
	КонецЦикла;
	
	ПутьКФайлу = Каталог + ИмяФайла;
	ЗаписатьДанныеВФайл(ДанныеФайла, ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанные(Каталог)
	
	Если ЗначениеЗаполнено(Объект.ВерсияПлатформы) Тогда
		ВыгрузитьДанныеПоВерсииПлатформы(Объект.ВерсияПлатформы, Каталог);	
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВерсииТипов.ВерсияПлатформы КАК ВерсияПлатформы
		               |ИЗ
		               |	Справочник.ВерсииТипов КАК ВерсииТипов
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВерсииТипов.ВерсияПлатформы";
		ВыборкаВерсий = Запрос.Выполнить().Выбрать();
		Пока ВыборкаВерсий.Следующий() Цикл
			ВыгрузитьДанныеПоВерсииПлатформы(ВыборкаВерсий.ВерсияПлатформы, Каталог);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьДанныеПоВерсииПлатформы(ВерсияПлатформы, Каталог)

	ВерсияПлатформыСтрокой = ВерсияПлатформыСтрокой(ВерсияПлатформы); 
	
	МодельДанных = Новый Структура;
	МодельДанных.Вставить("platformVersion");
	МодельДанных.Вставить("types", Новый Массив);
	МодельДанных.Вставить("events", Новый Массив);
	
	
	МодельДанных.platformVersion = ВерсияПлатформыСтрокой;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииТипов.Ссылка КАК Ссылка,
	               |	ВерсииТипов.Идентификатор КАК Идентификатор,
	               |	ВерсииТипов.Наименование КАК Наименование,
	               |	ВерсииТипов.НаименованиеАнгл КАК НаименованиеАнгл
	               |ПОМЕСТИТЬ Типы
	               |ИЗ
	               |	Справочник.ВерсииТипов КАК ВерсииТипов
	               |ГДЕ
	               |	ВерсииТипов.ВерсияПлатформы = &ВерсияПлатформы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Типы.Ссылка КАК Ссылка,
	               |	Типы.Идентификатор КАК Идентификатор,
	               |	Типы.Наименование КАК Наименование,
	               |	Типы.НаименованиеАнгл КАК НаименованиеАнгл,
	               |	Типы.Ссылка.Перечисление КАК ЭтоПеречисление,
	               |	Типы.Ссылка.Владелец.ИсключитьИзГлобальногоКонтекста КАК ИсключитьИзГлобальногоКонтекста
	               |ИЗ
	               |	Типы КАК Типы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Типы.Ссылка КАК СсылкаНаТип,
	               |	Методы.Ссылка КАК СсылкаНаМетод,
	               |	Методы.Наименование КАК Наименование,
	               |	Методы.НаименованиеАнгл КАК НаименованиеАнгл
	               |ИЗ
	               |	Типы КАК Типы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Методы КАК Методы
	               |		ПО Типы.Ссылка = Методы.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	События.Ссылка КАК Ссылка,
	               |	События.Наименование КАК Наименование,
	               |	События.НаименованиеАнгл КАК НаименованиеАнгл,
	               |	События.Владелец.Идентификатор КАК ИдентификаторТипа
	               |ИЗ
	               |	Справочник.События КАК События
	               |ГДЕ
	               |	События.ВерсияПлатформы = &ВерсияПлатформы
	               |ИТОГИ ПО
	               |	Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Свойства.Владелец КАК СсылкаНаТип,
	               |	Свойства.Ссылка КАК Ссылка,
	               |	Свойства.Наименование КАК Наименование,
	               |	Свойства.НаименованиеАнгл КАК НаименованиеАнгл,
	               |	Свойства.Владелец.Идентификатор КАК ИдентификаторТипа,
	               |	Свойства.РежимИспользования КАК РежимИспользования
	               |ИЗ
	               |	Справочник.Свойства КАК Свойства
	               |ГДЕ
	               |	Свойства.ВерсияПлатформы = &ВерсияПлатформы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Значения.Владелец КАК СсылкаНаТип,
	               |	Значения.Владелец.Идентификатор КАК ИдентификаторТипа,
	               |	Значения.Наименование КАК Наименование,
	               |	Значения.НаименованиеАнгл КАК НаименованиеАнгл
	               |ИЗ
	               |	Справочник.Значения КАК Значения
	               |ГДЕ
	               |	Значения.ВерсияПлатформы = &ВерсияПлатформы";
	Запрос.УстановитьПараметр("ВерсияПлатформы", ВерсияПлатформы);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаТипов = ПакетЗапросов[1].Выбрать();
	ВыборкаМетодов = ПакетЗапросов[2].Выгрузить();
	ВыборкаСобытий = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСвойств = ПакетЗапросов[4].Выгрузить();
	ВыборкаЗначенийТипов = ПакетЗапросов[5].Выгрузить();
	
	Пока ВыборкаТипов.Следующий() Цикл
		
		МодельТипа = МодельТипа();
		МодельТипа.id = ВыборкаТипов.Идентификатор;
		МодельТипа.name = ВыборкаТипов.НаименованиеАнгл;
		МодельТипа.nameRu = ВыборкаТипов.Наименование;
		Если (ВыборкаТипов.ЭтоПеречисление) Тогда
			МодельТипа.kind = "Enum";	
		КонецЕсли;
		МодельТипа.excludeFromGlobalContext = ВыборкаТипов.ИсключитьИзГлобальногоКонтекста; 
		
		Отбор = Новый Структура("СсылкаНаТип", ВыборкаТипов.Ссылка);
		РезультатПоискаМетодов = ВыборкаМетодов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСМетодом Из РезультатПоискаМетодов Цикл
			
			МодельМетода = МодельМетода();
			МодельМетода.name = СтрокаСМетодом.НаименованиеАнгл;
			МодельМетода.nameRu = СтрокаСМетодом.Наименование;
			// FIXME: x2
			МодельМетода.isFunction = СтрокаСМетодом.СсылкаНаМетод.ВозвращаемыеЗначения.Количество() > 0;
			
			// ищем контексты выполнения
			КонтекстыВыполнения = КонтекстыВыполненияПоМетоду(СтрокаСМетодом.СсылкаНаМетод);
			Для Каждого КонтекстВыполнения Из КонтекстыВыполнения Цикл
				Если Не ЗначениеЗаполнено(КонтекстВыполнения) Тогда
					Продолжить;
				КонецЕсли;
				ПредставленияЗначения = ПредставлениеКонтекстыВыполнения(КонтекстВыполнения);
				МодельМетода.executionContexts.Добавить(ПредставленияЗначения);	
			КонецЦикла;
			
			МодельТипа.methods.Добавить(МодельМетода);
				
		КонецЦикла;
		
		РезультатПоискаСвойств = ВыборкаСвойств.НайтиСтроки(Отбор);
		Для Каждого СтрокаСоСвойством Из РезультатПоискаСвойств Цикл
		
			МодельСвойства = МодельСвойства();
			МодельСвойства.name = СтрокаСоСвойством.НаименованиеАнгл;
			МодельСвойства.nameRu = СтрокаСоСвойством.Наименование;
			МодельСвойства.usage = ПредставлениеРежимаИспользования(СтрокаСоСвойством.РежимИспользования);
			МодельТипа.properties.Добавить(МодельСвойства);
			
		КонецЦикла;
		
		РезультатПоискаЗначений = ВыборкаЗначенийТипов.НайтиСтроки(Отбор);
		Для Каждого СтрокаЗначения Из РезультатПоискаЗначений Цикл	
			МодельЗначения = МодельЗначения();
			МодельЗначения.name = СтрокаЗначения.НаименованиеАнгл;
			МодельЗначения.nameRu = СтрокаЗначения.Наименование;
			МодельТипа.values.Добавить(МодельЗначения);
		КонецЦикла;
		
		МодельДанных.types.Добавить(МодельТипа);
		
	КонецЦикла;
	
	Пока ВыборкаСобытий.Следующий() Цикл
		
		МодельСобытия = МодельСобытия();
		МодельСобытия.nameRu = ВыборкаСобытий.Наименование;
		
		ВыборкаПоТипам = ВыборкаСобытий.Выбрать();
		Пока ВыборкаПоТипам.Следующий() Цикл
			Если Не ЗначениеЗаполнено(МодельСобытия.name) Тогда
				МодельСобытия.name = ВыборкаПоТипам.НаименованиеАнгл;	
			КонецЕсли;
			МодельСобытия.types.Добавить(ВыборкаПоТипам.ИдентификаторТипа);
		КонецЦикла;
		
		МодельДанных.events.Добавить(МодельСобытия);
		
	КонецЦикла;
	
	ПутьКФайлу = СтрШаблон("%1%2.json", Каталог, ВерсияПлатформыСтрокой);
	ЗаписатьДанныеВФайл(МодельДанных, ПутьКФайлу);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МодельТипа()
	Модель = Новый Структура;
	Модель.Вставить("id");
	Модель.Вставить("name");
	Модель.Вставить("nameRu");
	Модель.Вставить("kind", "Type");
	Модель.Вставить("methods", Новый Массив);
	Модель.Вставить("properties", Новый Массив);
	Модель.Вставить("values", Новый Массив);
	Модель.Вставить("excludeFromGlobalContext", Ложь);
	Возврат Модель;	
КонецФункции

&НаСервереБезКонтекста
Функция МодельМетода()
	Модель = Новый Структура;
	Модель.Вставить("name");
	Модель.Вставить("nameRu");
	Модель.Вставить("isFunction");
	Модель.Вставить("executionContexts", Новый Массив);
	Возврат Модель;	
КонецФункции

&НаСервереБезКонтекста
Функция МодельСобытия()
	Модель = Новый Структура;
	Модель.Вставить("name");
	Модель.Вставить("nameRu");
	Модель.Вставить("types", Новый Массив);
	Возврат Модель;	
КонецФункции

&НаСервереБезКонтекста
Функция МодельСвойства()
	Модель = Новый Структура;
	Модель.Вставить("name");
	Модель.Вставить("nameRu");
	Модель.Вставить("usage");
	Возврат Модель;
КонецФункции

&НаСервереБезКонтекста
Функция МодельЗначения()
	Модель = Новый Структура;
	Модель.Вставить("name");
	Модель.Вставить("nameRu");
	Возврат Модель;	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеВФайл(Данные, ПутьКФайлу)
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ПутьКФайлу);		
	ЗаписатьJSON(Запись, Данные);
	Запись.Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИдентификаторовТипов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Типы.Идентификатор КАК Идентификатор,
	|	Типы.Наименование Как Наименование,
	|	Типы.НаименованиеАнгл Как НаименованиеАнгл
	|ИЗ
	|	Справочник.Типы КАК Типы
	|ГДЕ
	|	НЕ Типы.ЭтоГруппа
	|	И НЕ Типы.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонЗаписиИдентификаторовТипов()
	Возврат Новый Структура("Identifiers", Новый Массив);	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонЗаписиГлобальныхМетодов()
	Возврат Новый Структура("globalMethods", Новый Массив);	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонЗаписиИдентификатораТипа()
	Шаблон = Новый Структура;
	Шаблон.Вставить("Id", "");	
	Шаблон.Вставить("Name", "");
	Шаблон.Вставить("NameRu", "");
	Возврат Шаблон;
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонОписанияГлобальногоМетода()
	Шаблон = Новый Структура;
	Шаблон.Вставить("Name", "");
	Шаблон.Вставить("NameRu", "");
	Шаблон.Вставить("platformVersions", Новый Массив);
	Возврат Шаблон;
КонецФункции

&НаСервере
Процедура ТестовыеДанные()
	Объект.КаталогЭкспорта = "D:\SB\develop\platform-context\export\";
	Объект.ВыгрузитьДанные = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеРежимаИспользования(ВходящееЗначение)
	Если ВходящееЗначение = Перечисления.РежимИспользованияСвойства.ТолькоЗапись Тогда
		Возврат "WriteOnly";
	ИначеЕсли ВходящееЗначение = Перечисления.РежимИспользованияСвойства.ТолькоЧтение Тогда
		Возврат "ReadOnly";		
	КонецЕсли;
	Возврат "ReadAndWrite";
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеКонтекстыВыполнения(ВходящееЗначение)
	
	Если ВходящееЗначение = Перечисления.КонтекстыВыполнения.ВебКлиент Тогда
		Возврат "WebClient";	
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.ВнешнееСоединение Тогда
		Возврат "ExternalConnection";	
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.Интеграция Тогда
		Возврат "Integration";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.МобильноеПриложениеКлиент Тогда
		Возврат "MobileApplicationClient";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.МобильноеПриложениеСервер Тогда
		Возврат "MobileApplicationServer";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.МобильныйАвтономныйСервер Тогда
		Возврат "MobileStandaloneServer";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.МобильныйКлиент Тогда
		Возврат "MobileClient";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.Сервер Тогда
		Возврат "Server";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.ТолстыйКлиент Тогда
		Возврат "ThickClient";
	ИначеЕсли ВходящееЗначение = Перечисления.КонтекстыВыполнения.ТонкийКлиент Тогда
		Возврат "ThinClient";
	Иначе
		ВызватьИсключение СтрШаблон("Представление входящего значения %1 не поддерживается", ВходящееЗначение);	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстыВыполненияПоМетоду(Метод)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МетодыКонтекстыВыполнения.Контекст КАК Контекст
	               |ИЗ
	               |	Справочник.Методы.КонтекстыВыполнения КАК МетодыКонтекстыВыполнения
	               |ГДЕ
	               |	МетодыКонтекстыВыполнения.Ссылка = &Метод";
	Запрос.УстановитьПараметр("Метод", Метод);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Контекст");
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияПлатформыСтрокой(ВерсияПлатформы, Префикс = "")
	Возврат Префикс + СтрЗаменить(Строка(ВерсияПлатформы), ".", "_");	
КонецФункции



#КонецОбласти
